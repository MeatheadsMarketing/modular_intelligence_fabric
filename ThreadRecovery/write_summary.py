import os
import argparse
from datetime import datetime
import hashlib

def count_files(path):
    return len([f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])

def generate_fingerprint(thread_name, date_str):
    return hashlib.sha256((thread_name + date_str).encode()).hexdigest()[:12].upper()

def write_summary(folder, thread_name):
    date_str = datetime.now().strftime("%Y-%m-%d")
    fingerprint = generate_fingerprint(thread_name, date_str)

    table_count = count_files(os.path.join(folder, "tables")) if os.path.exists(os.path.join(folder, "tables")) else 0
    code_count = count_files(os.path.join(folder, "code_blocks")) if os.path.exists(os.path.join(folder, "code_blocks")) else 0
    deepdive_count = count_files(os.path.join(folder, "deepdives")) if os.path.exists(os.path.join(folder, "deepdives")) else 0
    prompt_count = count_files(os.path.join(folder, "prompt_logic")) if os.path.exists(os.path.join(folder, "prompt_logic")) else 0

    placeholder_flags = "Not Yet Scanned"
    merge_ready = "Unknown"
    suggested_tags = "Auto-detect (Next Phase)"
    summary_note = "Thread was processed successfully. Outputs are ready for routing into TerminalStreamlitBuilder."

    summary_content = f"""# Recovery Summary

**Thread Name:** {thread_name}  
**Date Processed:** {date_str}  
**Fingerprint ID:** {fingerprint}  

---

## ✅ Extracted Assets

| Type           | Count |
|----------------|-------|
| Tables         | {table_count} |
| Code Blocks    | {code_count} |
| Deep Dives     | {deepdive_count} |
| Prompt Logic   | {prompt_count} |

---

## ⚠️ Warnings & Notes

- Placeholder Content Detected: {placeholder_flags}
- Mergeable Tables: {merge_ready}
- Suggested Tags: {suggested_tags}

---

## Summary

{summary_note}

---

*Auto-generated by ThreadRecoveryOrganizer. See `thread_registry.csv` for full index.*
"""

    with open(os.path.join(folder, "recovery_summary.md"), "w") as f:
        f.write(summary_content)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate recovery summary from output folder.")
    parser.add_argument("--input", required=True, help="Path to recovered thread folder")
    parser.add_argument("--name", required=True, help="Thread name (used for fingerprint)")
    args = parser.parse_args()

    write_summary(args.input, args.name)
